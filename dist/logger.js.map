{"version":3,"sources":["../src/logger.ts"],"names":["level","process","env","LOG_LEVEL","combine","format","timestamp","label","printf","myFormat","info","message","logger","colorize","transports","File","filename","NODE_ENV","add","Console"],"mappings":";;;;;;;AAAA;;AACA,IAAMA,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,OAAvC;IACQC,O,GAAsCC,e,CAAtCD,O;IAASE,S,GAA6BD,e,CAA7BC,S;IAAWC,K,GAAkBF,e,CAAlBE,K;IAAOC,M,GAAWH,e,CAAXG,M;AAEnC,IAAMC,QAAQ,GAAGD,MAAM,CAAC,UAACE,IAAD,EAAU;AACjC,mBAAUA,IAAI,CAACJ,SAAf,eAA6BI,IAAI,CAACH,KAAlC,eAA4CG,IAAI,CAACV,KAAjD,eAA2DU,IAAI,CAACC,OAAhE;AACA,CAFsB,CAAvB;AAIA,IAAMC,MAAM,GAAG,2BAAa;AAC3BZ,EAAAA,KAAK,EAAEA,KADoB;AAE3BK,EAAAA,MAAM,EAAED,OAAO,CAACG,KAAK,CAAC;AAAEA,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAN,EAA6BD,SAAS,EAAtC,EAA0CD,gBAAOQ,QAAP,EAA1C,EAA6DJ,QAA7D,CAFY;AAG3BK,EAAAA,UAAU,EAAE,CACX;AACA;AACA;AACA;AACA,MAAIA,oBAAWC,IAAf,CAAoB;AAAEC,IAAAA,QAAQ,EAAE,kBAAZ;AAAgChB,IAAAA,KAAK,EAAE;AAAvC,GAApB,CALW;AAHe,CAAb,CAAf;;AAaA,IAAIC,OAAO,CAACC,GAAR,CAAYe,QAAZ,KAAyB,YAA7B,EAA2C;AAC1CL,EAAAA,MAAM,CAACM,GAAP,CACC,IAAIJ,oBAAWK,OAAf,CAAuB;AACtBd,IAAAA,MAAM,EAAEI;AADc,GAAvB,CADD;AAKA,C,CAED;;;eACeG,M;AAEf","sourcesContent":["import { createLogger, format, transports } from \"winston\";\r\nconst level = process.env.LOG_LEVEL || \"debug\";\r\nconst { combine, timestamp, label, printf } = format;\r\n\r\nconst myFormat = printf((info) => {\r\n\treturn `${info.timestamp} [${info.label}] ${info.level}: ${info.message}`;\r\n});\r\n\r\nconst logger = createLogger({\r\n\tlevel: level,\r\n\tformat: combine(label({ label: \"see me\" }), timestamp(), format.colorize(), myFormat),\r\n\ttransports: [\r\n\t\t//\r\n\t\t// - Write to all logs with level `info` and below to `combined.log`\r\n\t\t// - Write all logs error (and below) to `error.log`.\r\n\t\t//\r\n\t\tnew transports.File({ filename: \"./logs/error.log\", level: \"error\" }),\r\n\t\t// new transports.File({ filename: './logs/combined.log' })\r\n\t],\r\n});\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n\tlogger.add(\r\n\t\tnew transports.Console({\r\n\t\t\tformat: myFormat,\r\n\t\t})\r\n\t);\r\n}\r\n\r\n// export { logger as logger };\r\nexport default logger;\r\n\r\n/* \r\nvar options = {\r\n  file: {\r\n    level: 'info',\r\n    filename: `${appRoot}/logs/app.log`,\r\n    handleExceptions: true,\r\n    json: true,\r\n    maxsize: 5242880, // 5MB\r\n    maxFiles: 5,\r\n    colorize: false,\r\n  },\r\n  console: {\r\n    level: 'debug',\r\n    handleExceptions: true,\r\n    json: false,\r\n    colorize: true,\r\n  },\r\n};\r\n\r\n\r\nvar logger = new winston.Logger({\r\n  transports: [\r\n    new winston.transports.File(options.file),\r\n    new winston.transports.Console(options.console)\r\n  ],\r\n  exitOnError: false, // do not exit on handled exceptions\r\n}); \r\n*/\r\n"],"file":"logger.js"}